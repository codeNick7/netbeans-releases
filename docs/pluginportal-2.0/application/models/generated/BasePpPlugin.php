<?php

// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PpPlugin', 'plugins');

/**
 * BasePpPlugin
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $pluginid
 * @property string $quality_level
 * @property string $version
 * @property text $description
 * @property string $nbm_url
 * @property text $home_page_url
 * @property integer $categoryid
 * @property integer $categoryid2
 * @property integer $categoryid3
 * @property string $author_userid
 * @property integer $download_size
 * @property string $target_platforms
 * @property string $image_filename
 * @property integer $downloads
 * @property text $new_version_comments
 * @property date $date_last_updated
 * @property float $average_rating
 * @property string $plugin_name
 * @property string $price
 * @property string $keywords
 * @property string $fullsize_image_filename
 * @property string $versions_supported
 * @property string $displaycategory
 * @property string $nbm_filename
 * @property date $date_added
 * @property string $license_type
 * @property text $summary
 * @property integer $published
 * @property integer $signed
 * @property integer $parent
 * @property integer $publicid
 * @property Doctrine_Collection $Comments
 * @property PpDisplayCategory $Category
 * @property PpDisplayCategory $Category2
 * @property PpDisplayCategory $Category3
 * @property Doctrine_Collection $Ratings
 * @property Doctrine_Collection $Verifications
 * @property Doctrine_Collection $Logs
 * @property Doctrine_Collection $PpPluginToVersion
 * @property Doctrine_Collection $Binaries
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePpPlugin extends Doctrine_Record {

    public function setTableDefinition() {
        $this->setTableName('pluginimpl');
        $this->hasColumn('pluginid', 'integer', null, array(
            'type' => 'integer',
            'autoincrement' => false,
            'primary' => true,
            'length' => '',
        ));
        $this->hasColumn('quality_level', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('version', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('description', 'text', null, array(
            'type' => 'text',
            'length' => '',
        ));
        $this->hasColumn('nbm_url', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('home_page_url', 'text', null, array(
            'type' => 'text',
            'length' => '',
        ));
        $this->hasColumn('categoryid', 'integer', null, array(
            'type' => 'integer',
            'length' => '',
        ));
        $this->hasColumn('categoryid2', 'integer', null, array(
            'type' => 'integer',
            'length' => '',
        ));
        $this->hasColumn('categoryid3', 'integer', null, array(
            'type' => 'integer',
            'length' => '',
        ));
        $this->hasColumn('author_userid', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('download_size', 'integer', null, array(
            'type' => 'integer',
            'length' => '',
        ));
        $this->hasColumn('target_platforms', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('image_filename', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('downloads', 'integer', null, array(
            'type' => 'integer',
            'length' => '',
        ));
        $this->hasColumn('new_version_comments', 'text', null, array(
            'type' => 'text',
            'length' => '',
        ));
        $this->hasColumn('date_last_updated', 'date', null, array(
            'type' => 'date',
            'length' => '',
        ));
        $this->hasColumn('average_rating', 'float', null, array(
            'type' => 'float',
            'length' => '',
        ));
        $this->hasColumn('plugin_name', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('price', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('keywords', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('fullsize_image_filename', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('versions_supported', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('displaycategory', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('nbm_filename', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('date_added', 'date', null, array(
            'type' => 'date',
            'length' => '',
        ));
        $this->hasColumn('license_type', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
        $this->hasColumn('summary', 'text', null, array(
            'type' => 'text',
            'length' => '',
        ));
        $this->hasColumn('published', 'integer', 1, array(
            'type' => 'integer',
            'length' => '1',
        ));
        $this->hasColumn('signed', 'integer', 1, array(
            'type' => 'integer',
            'default' => '0',
            'length' => '1',
        ));
        $this->hasColumn('parent', 'integer', null, array(
            'type' => 'integer',
            'length' => '',
        ));
        $this->hasColumn('publicid', 'integer', null, array(
            'type' => 'integer',
            'length' => '',
        ));
    }

    public function setUp() {
        parent::setUp();
        $this->hasMany('PpComment as Comments', array(
            'local' => 'publicid',
            'foreign' => 'plugin_pluginid',
            'onDelete' => 'CASCADE',
            'cascade' => array(
                0 => 'delete',
            ),
            'orderBy' => 'datetime_entered desc'));

        $this->hasOne('PpDisplayCategory as Category', array(
            'local' => 'categoryid',
            'foreign' => 'id'));

        $this->hasOne('PpDisplayCategory as Category2', array(
            'local' => 'categoryid2',
            'foreign' => 'id'));

        $this->hasOne('PpDisplayCategory as Category3', array(
            'local' => 'categoryid3',
            'foreign' => 'id'));

        $this->hasMany('PpRating as Ratings', array(
            'local' => 'publicid',
            'foreign' => 'plugin_pluginid',
            'onDelete' => 'CASCADE',
            'cascade' => array(
                0 => 'delete',
                )));

        $this->hasMany('PpBinary as Binaries', array(
            'local' => 'pluginid',
            'foreign' => 'plugin_id',
            'onDelete' => 'CASCADE',
            'cascade' => array(
                0 => 'delete',
                ),
            'orderBy' => 'version_id desc'));

        $this->hasMany('PpVerification as Verifications', array(
            'local' => 'pluginid',
            'foreign' => 'plugin_pluginid',
            'onDelete' => 'CASCADE',
            'cascade' => array(
                0 => 'delete',
            ),
            'orderBy' => 'version'));

        $this->hasMany('PpLog as Logs', array(
            'local' => 'publicid',
            'foreign' => 'pluginid'));

        $this->hasMany('PpPluginToVersion', array(
            'local' => 'plugin_id',
            'foreign' => 'plugin_id'));
    }

}